
[{"content":"","date":"7 April 2024","externalUrl":null,"permalink":"/","section":"My awesome website","summary":"","title":"My awesome website","type":"page"},{"content":"","date":"7 April 2024","externalUrl":null,"permalink":"/post/","section":"Posts","summary":"","title":"Posts","type":"post"},{"content":" ACM Digital Library Paper\n作者： Burton H. Bloom\n本文分析了哈希编码中某些计算因素之间的权衡。所考虑的范例问题是逐一测试一系列消息是否属于给定消息集。研究了两种新的哈希编码方法，并将其与一种特定的传统哈希编码方法进行了比较。考虑的计算因素包括哈希区域的大小（空间）、识别消息不属于给定集合所需的时间（拒绝时间）和允许的错误频率。\n新方法旨在减少包含哈希编码信息所需的空间量，而不是与传统方法相关联的空间量。减少空间是通过利用在某些应用中可能容忍一小部分委托错误的可能性来实现的，特别是在涉及大量数据且因此使用传统方法不可行核心常驻哈希区域的应用中。\n在这样的应用中，可以设想通过使用较小的核心常驻哈希区域与新方法结合使用，并在必要时使用一些次要的，可能耗时的测试来“捕获”与新方法相关联的一小部分错误，可以提高整体性能。讨论了一个例子，说明了新方法可能的应用领域。\n对范例问题的分析表明，允许少量测试消息被错误地识别为给定集合的成员，将允许使用更小的哈希区域，而不会增加拒绝时间。\n关键词和短语： 哈希编码、哈希寻址、散列存储、搜索、存储布局、检索权衡、检索效率、存储效率 CR 类别： 3.73、3.74、3.79\n导言 # 在传统的哈希编码中，哈希区域被组织成单元，并且使用迭代伪随机计算过程从给定的消息集中生成空单元的哈希地址，然后将消息存储到这些单元中。通过类似的迭代生成单元哈希地址的过程来测试消息。然后将这些单元的内容与测试消息进行比较。匹配表示测试消息是集合的成员；空单元表示相反。假设读者熟悉这种方法和类似的传统哈希编码方法 [1, 2, 3]。\n将引入的新哈希编码方法建议用于绝大多数要测试的消息不属于给定集合的应用程序。对于这些应用程序，将考虑将识别测试消息不属于给定集合所需的平均时间（称为拒绝时间）作为时间单位。此外，由于通常可以通过检查部分消息来识别单元的内容与测试消息不匹配，因此将引入一个适当的假设，即访问哈希区域中各个位所需的时间。\n除了两个计算因素（拒绝时间和空间（即哈希区域大小））之外，本文还考虑了第三个计算因素，即允许的错误分数。将表明，允许少量测试消息被错误地识别为给定集合的成员，将允许使用更小的哈希区域，而不会增加拒绝时间。在一些实际应用中，哈希区域大小的这种减少可能导致在核心（其中可以快速处理哈希区域）中维护哈希区域与将其放在慢速访问的批量存储设备（例如磁盘）上的区别。\n将介绍两种通过允许错误来减少哈希区域大小的方法。将分析每种方法的哈希区域大小和允许错误分数之间的权衡，以及它们产生的空间/时间权衡。\n读者应该注意，新方法并不用于替代任何当前使用哈希编码的应用领域的传统哈希编码方法（例如，符号表管理 [1]）。相反，它们旨在使利用哈希编码技术在某些领域成为可能，在这些领域中，传统的无错误方法需要太大的哈希区域，无法成为核心常驻，因此被认为是不可行的。为了在不引入过多的拒绝时间的情况下大幅减少哈希区域大小，牺牲了与传统方法相关的无错误性能。在无错误性能是必需的应用领域，这些新方法不适用。\n一个示例应用程序 # 允许错误有望允许有效减少哈希区域大小的应用程序类型可以描述如下。假设程序必须针对大量不同情况执行计算过程。此外，假设对于绝大多数情况，该过程非常简单，但对于难以识别的一小部分情况，该过程非常复杂。然后，对少数情况的标识符进行哈希编码可能很有用，以便可以更轻松地测试要处理的每个情况是否属于少数情况集。如果一个特定情况被拒绝（大多数情况下会发生这种情况），则将使用简单的过程。如果一个案例没有被拒绝，那么可以对其进行后续测试，以确定它实际上是少数情况集的成员还是“允许的错误”。通过允许此类错误，可以使哈希区域足够小，从而使此过程切实可行。\n作为这种应用程序的一个示例，请考虑一个自动连字符程序。让我们假设一些简单的规则可以正确地连字符 90% 的英语单词，但其他 10% 需要字典查找。假设这个字典太大而无法放入可用的核心内存中，因此将其保存在磁盘上。通过允许一些单词被错误地识别为属于 10%，可以使 10% 的哈希区域足够小，以适合核心。当出现“允许的错误”时，测试词不会在磁盘上找到，可以使用简单的规则对其进行连字符。很少发生不必要的磁盘访问，其频率与核心常驻哈希区域的大小有关。本文末尾将详细分析此示例应用程序。\n传统哈希编码方法 # 作为出发点，我们将回顾一种不允许出现错误的传统哈希编码方法。假设我们存储一组 n 条消息，每条消息长度为 b 位。首先，我们将哈希区域组织成 h 个单元，每个单元 b + 1 位，h \u0026gt; n。每个单元中的额外位用作标志，以指示该单元是否为空。为此，将消息视为 b + 1 位对象，第一位始终设置为 1。然后，存储过程如下：\n生成一个称为哈希地址的伪随机数，例如 k，（0 ≤ k ≤ h - 1），其方式取决于正在考虑的消息。然后检查第 k 个单元以查看它是否为空。如果是，则将消息存储在第 k 个单元中。如果不是，则继续生成其他哈希地址，直到找到一个空单元，然后将消息存储到该单元中。\n测试新消息是否为成员的方法类似于存储消息的方法。使用与上述相同的随机数生成技术生成一系列哈希地址，直到发生以下情况之一。\n找到一个单元，其中存储的消息与正在测试的消息相同。在这种情况下，新消息属于该集合，并被称为被接受。 找到一个空单元。在这种情况下，新消息不属于该集合，并被称为被拒绝。 两种允许误差的哈希编码方法 # 方法 1 是以自然的方式从传统的无错误方法派生的。哈希区域像以前一样被组织成单元，但单元更小，包含代码而不是整个消息。代码是从消息生成的，其大小取决于允许的错误分数。直观上，可以看出单元大小应该随着允许的错误分数变小而增加。当错误分数足够小时（大约为 2-b），单元将足够大以包含整个消息本身，从而不会产生错误。如果 P 表示允许的错误分数，则假设 1 \u0026raquo; P \u0026raquo; 2-b。\n确定了单元的大小（例如 c \u0026lt; b），选择该大小以使预期的错误分数接近且小于 P，哈希区域被组织成 c 位的单元。然后将每个消息编码成一个 c 位代码（不一定唯一），并且以类似于传统无错误方法中使用的方式存储和测试这些代码。和以前一样，每个代码的第一位设置为 1。由于代码不是唯一的，就像原始消息一样，可能会出现委托错误。\n方法 2 完全摆脱了将哈希区域组织成单元的传统概念。哈希区域被视为 N 个单独可寻址的位，地址为 0 到 N - 1。假设哈希区域中的所有位首先设置为 0。接下来，要存储的集合中的每个消息都被哈希编码成多个不同的位地址，例如 a1、a2、\u0026hellip;、ad。最后，所有由 a1 到 ad 寻址的 d 位都设置为 1。\n要测试新消息，将以与存储消息相同的方式生成一系列 d 位地址，例如 a1、a2、\u0026hellip;、ad。如果所有 d 位都为 1，则新消息被接受。如果这些位中的任何一位为零，则该消息被拒绝。\n直观上，可以看出，在达到收益递减点之前，d 越大，预期的错误分数就越小。当将 d 增加 1 导致哈希字段中 1 位的分数增长过大时，就会出现收益递减点。稍后本文将表明，当哈希字段中一半位为 1，一半位为 0 时，每个访问位为 1 的先验可能性增加超过了添加要测试的额外位的效果。因此，对于任何给定的哈希字段大小 N，都存在一个最小可能的预期错误分数，因此方法 2 排除了通过修改方法 1 以获得非常小的允许错误分数而可能实现的无错误性能。\n计算因素 # 允许的错误分数。 将根据允许一些消息被错误地识别为给定消息集的成员可以减少哈希区域的大小来分析此因素。我们用以下公式表示错误分数： $$ P = \\frac{n_a - n}{n_t - n} $$ (1)\n其中：\n$$n_a$$ 是消息空间中将被接受为给定集合成员的消息数量 $$n$$ 是给定集合中的消息数量 $$n_t$$ 是消息空间中不同消息的总数 空间。 基本空间因素是哈希区域中的位数 N。通过分析更改 N 值对时间因素的影响，稍后将引入一个合适的标准化空间因素度量。使用此标准化度量将把由于给定消息集中消息数量和允许的错误分数而对时间产生的影响与由于哈希区域大小而对时间产生的影响分开。这种效果分离将允许更清晰地呈现空间/时间权衡。\n时间。 时间因素是将消息拒绝为给定集合成员所需的平均时间。在测量这个因素时，使用的单位是在哈希区域中计算单个位地址、访问寻址位和对位内容进行适当测试所需的时间。\n对于传统的哈希编码方法，测试是比较哈希区域中的寻址位与消息中相应的位。对于方法 1，测试是比较哈希区域位与从消息派生的相应代码位。对于方法 2，测试只是简单地确定哈希区域位的内容；例如，它是 1 吗？对于以下分析，假设三个方法和哈希区域中的所有位的时间单位相同1。\n以这些单位测量的時間因素称为归一化时间度量，并且将针对此因素分析空间/时间权衡。归一化时间度量为：\n$$ T = \\text{mean} \\left( t_i \\right)_{m_i \\in a} $$\n(2)\n其中：\nM 是给定的消息集 a 是被识别（正确或错误）为 M 成员的消息集 g 是被识别为非 M 成员的消息集 $$m_i$$ 是第 i 条消息 $$t_i$$ 是拒绝第 i 条消息所需的时间 传统哈希编码方法的分析 # 哈希区域有 N 位，并被组织成 h 个单元，每个单元 b + 1 位，其中 n 个单元填充了 M 中的 n 条消息。让 Φ 表示为空的单元的分数。然后\n$$ \\frac{h - n}{h} = \\frac{N - n \\cdot (b + 1)}{N} = \\Phi - \\frac{h}{N} $$ (3)\n求解 N 得到\n$$ N = \\frac{n \\cdot (b + 1)}{1 - \\Phi} $$ (4)\n现在让我们计算归一化时间度量 T。T 表示在典型拒绝过程中要测试的预期位数。T 也等于在访问和放弃非空单元后要测试的预期位数。也就是说，如果一个哈希寻址单元包含一条与要测试的消息不同的消息，那么平均来说，在测试了 E 位之后就会发现这一点。然后，该过程实际上又重新开始。\n由于 Φ 表示为空的单元的分数，因此访问非空单元的概率为 (1 - Φ)，访问空单元的概率为 Φ。如果访问一个非空单元，则要测试的预期位数为 E + T，因为 E 表示拒绝访问的非空单元时要测试的预期位数，T 表示重复该过程时要测试的预期位数。如果访问一个空单元，则只测试一位即可发现这一事实。因此\n$$ T = (1 - \\Phi) \\cdot (E + T) + \\Phi $$ (5)\n为了计算 E 的值，我们注意到，在给定单元包含一条与要测试的消息不同的消息的条件下，单元的前 x 位与要测试的消息的位匹配，而第 (x + 1) 位不匹配的条件概率为 $(\\frac{1}{2})^x$。（读者应该记住，消息的第一位始终与非空单元的第一位匹配，因此指数为 x 而不是 x + 1，否则就是这种情况。）因此，对于 b \u0026raquo; 1，E 的期望值近似为以下总和：\n$$ \\sum_{x=1}^{\\infty} (x + 1) \\cdot (\\frac{1}{2})^x = 3 $$ (6)\n因此\n$$ T = \\frac{3}{\\Phi} - 2 $$ (7)\n$$ N = \\frac{n \\cdot (b + 1) \\cdot (T + 2)}{T - 1} $$ (8)\n方程 (8) 表示传统哈希编码方法的空间/时间权衡。\n方法 1 的分析 # 哈希区域包含 N\u0026rsquo; 位，并被组织成 c 位的单元。以类似于传统方法的方式，我们建立以下方程式：\n$$ \\Phi\u0026rsquo; = \\frac{N\u0026rsquo; - n \\cdot c}{N\u0026rsquo;} $$ (9) - 空单元的分数。\n$$ N\u0026rsquo; = \\frac{n \\cdot c}{1 - \\Phi\u0026rsquo;} $$ (10)\n$$ T\u0026rsquo; = \\frac{3}{\\Phi\u0026rsquo;} - 2 $$ (11)\n$$ N\u0026rsquo; = \\frac{n \\cdot c \\cdot (T\u0026rsquo; + 2)}{T\u0026rsquo; - 1} $$ (12)\n剩下的就是根据 c 和 T\u0026rsquo; 以及根据 N\u0026rsquo; 和 T\u0026rsquo; 推导出相应预期错误分数 P\u0026rsquo; 的关系。\n一条要测试的消息，它不是消息集 M 的成员，当满足以下条件时，将被错误地接受为 M 的成员：\n(1) 从测试消息生成的一系列哈希地址之一包含与从测试消息生成的相同的代码，例如 C；并且 (2) 这样的哈希地址是在序列中比某个空单元的哈希地址更早生成的。\n然后，被错误接受的非 M 成员的测试消息的预期分数为\n$$ P\u0026rsquo; = \\frac{(\\frac{1}{2})^{c-1}}{\\Phi\u0026rsquo;} $$ (13)\n因此\n$$ c = - log_2P\u0026rsquo; + 1 + log_2(\\frac{T\u0026rsquo; + 2}{T\u0026rsquo; - 1}) $$ (14)\n$$ N\u0026rsquo; = n \\cdot (-log_2P\u0026rsquo; + 1 + log_2(\\frac{T\u0026rsquo; + 2}{T\u0026rsquo; - 1})) \\cdot \\frac{T\u0026rsquo; + 2}{T\u0026rsquo; - 1} $$ (15)\n方程 (15) 表示方法 1 的所有三个计算因素之间的权衡。\n方法 2 的分析 # 让 Φ\u0026quot; 表示在存储了 n 条消息后，N\u0026quot; 位哈希区域中仍设置为 0 的位的预期比例，其中 d 是为给定集合中的每条消息设置为 1 的不同位数。\n$$ \\Phi\u0026quot; = (1 - \\frac{d}{N\u0026quot;})^n $$ (16)\n如果测试的所有 d 位都为 1，则不在给定集合中的消息将被错误接受。然后，导致此类错误的非 M 成员的测试消息的预期分数为\n$$ P\u0026quot; = (1 - \\Phi\u0026quot;)^d $$ (17)\n假设 d \u0026laquo; N\u0026quot;，当然就是这种情况，我们取等式 (16) 两边的以 2 为底的对数，得到近似\n$$ log_2\\Phi\u0026quot; = log_2(1 - \\frac{d}{N\u0026quot;})^n $$\n$$ = -n \\cdot (\\frac{d}{N\u0026quot;}) \\cdot log_2e $$\n因此\n$$ N\u0026quot; = \\frac{n \\cdot (-log_2P\u0026quot;) \\cdot log_2e}{log_2\\Phi\u0026quot;} $$ (19)\n我们现在推导出归一化时间度量 T\u0026quot; 的关系。当测试的前 x - 1 位为 1，而测试的第 x 位为 0 时，将测试 x 位。这发生的概率为 $$ \\Phi\u0026quot; \\cdot (1 - \\Phi\u0026quot;)^{x-1}$$。对于 $$P\u0026quot; \u0026laquo; 1$ 和 $d \u0026raquo; 1$$，T\u0026quot; 的近似值（每个被拒绝的测试消息的测试位数的期望值）为\n$$ T\u0026quot; = \\sum_{x=1}^{\\infty} x \\cdot \\Phi\u0026quot; \\cdot (1 - \\Phi\u0026quot;)^{x-1} = \\frac{1}{\\Phi\u0026quot;} $$ (20)\n因此\n$$ N\u0026quot; = \\frac{n \\cdot (-log_2P\u0026quot;) \\cdot log_2e}{log_2(\\frac{1}{T\u0026quot;}) \\cdot log_2(1 - \\frac{1}{T\u0026quot;})} $$ (21)\n方程 (21) 表示方法 2 的三个计算因素之间的权衡。\n方法 1 和方法 2 的比较 # 为了比较方法 1 和方法 2 之间的相对空间/时间权衡，引入一个归一化空间度量会很有用，\n$$ S = \\frac{N}{-n \\cdot log_2P} $$ (22)\nS 被标准化以消除给定消息集的大小 n 和允许的错误分数 P 的影响。将关系 (22) 代入等式 (15) 和 (21) 得到\n$$ S\u0026rsquo; = (-log_2P\u0026rsquo; + 1 + log_2(\\frac{T\u0026rsquo; + 2}{T\u0026rsquo; - 1})) \\cdot \\frac{T\u0026rsquo; + 2}{T\u0026rsquo; - 1} $$ (23)\n$$ S\u0026quot; = \\frac{log_2e}{log_2(\\frac{1}{T\u0026quot;}) \\cdot log_2(1 - \\frac{1}{T\u0026quot;})} $$ (24)\n我们注意到 $S$\u0026rsquo; \u0026gt; \\frac{T\u0026rsquo; + 2}{T\u0026rsquo; - 1}$$，并且\n$$ \\lim_{\\Phi\u0026rsquo; \\to 0} S\u0026rsquo; = \\frac{T\u0026rsquo; + 2}{T\u0026rsquo; - 1} $$ (25)\n可以通过检查图 1 直接看到方法 2 比方法 1 的优越性，图 1 是等式 (24) 的 S 与 T 曲线和下限极限方程 (25) 的图形。图 1 中的曲线说明了两种方法的空间/时间权衡，假设预期错误分数 P 和消息数量 n 的值固定。\n对于方法 2，T\u0026quot; 的增加对应于 Φ\u0026quot; 的减少，Φ\u0026quot; 是所有 n 条消息都被哈希编码后哈希字段中 0 位的分数。为了保持 P 的固定值，Φ\u0026quot; 的这种减少对应于每个消息的测试位数 d 的增加，以及对哈希区域大小 N\u0026quot; 的适当调整。S\u0026quot; 与哈希区域大小 N\u0026quot; 成正比，如等式 (22) 所示。随着 T\u0026quot; 的增加，相应地，Φ\u0026quot; 减少，S 和 N\u0026quot; 减少，直到达到收益递减点。这个收益递减点在图 1 中说明，其中 S\u0026quot; 在 $$\\frac{1}{T\u0026quot;} = 1 - \\frac{1}{T\u0026quot;}$$ 时最小，即在 T\u0026quot; = 2 时。\n由于 $$\\Phi\u0026quot; = \\frac{1}{T\u0026quot;}$$，这意味着可以使用方法 2 的最小哈希区域发生在一半位为 1 而另一半位为 0 时。对应于 T\u0026quot; = 2 的 S\u0026quot; 值为 $$S\u0026quot; = log_2e = 1.47$$。\n连字符示例应用程序的分析 # 在本节中，我们将计算一个名义大小的哈希区域，用于解决示例自动连字符问题。由于我们已经得出结论，方法 2 比方法 1 更好，因此我们将传统方法与方法 2 进行比较。\n让我们假设程序要连字符大约 500,000 个单词，其中 450,000 个单词可以通过应用一些简单的规则来连字符。其他 50,000 个单词需要参考字典。可以合理地估计，使用传统的哈希编码方法表示这 50,000 个单词中的每一个平均至少需要 19 位。如果我们假设时间因素 T = 4 是可以接受的，那么我们从等式 (9) 发现哈希区域的大小为 2,000,000 位。对于实际的核心包含哈希区域来说，这可能太大了。通过使用允许误差频率为 P = 1/16 的方法 2，并通过让 T = 2 使用最小的哈希区域，我们从等式 (22) 看到，可以使用小于 300,000 位的哈希区域来解决问题，这个大小很可能适合核心哈希区域。\n选择 P 为 1/16 时，对于大约 50,000 + 450,000/16 ≈ 78,000 个要连字符的 500,000 个单词，即大约 16% 的情况，需要访问磁盘驻留字典。与使用完全磁盘驻留哈希区域和字典的典型传统方法相比，这减少了 84% 的磁盘访问次数。\n表 I 显示了对 P 值的替代选择如何影响核心驻留哈希区域的大小以及与“典型传统方法”相比节省的磁盘访问百分比。\nP = Allowable Fraction of Errors N = Size of Hash Area (Bits) Disk Accesses Saved 1/2 72,800 45.0% 1/4 145,600 67.5% 1/8 218,400 78.7% 1/16 291,200 84.4% 1/32 364,000 87.2% 1/64 509,800 88.5% P = 允许的错误分数 N = 哈希区域大小（位） 节省的磁盘访问次数\n致谢 # 作者要感谢奥利弗·塞尔弗里奇先生在撰写本文时提供的许多有益建议。\n参考文献 # BATSON, A. 符号表组织。ACM 通讯，8, 2（1965 年 2 月），111-112。 MAURER, W. D. 用于分散存储的改进哈希码。ACM 通讯，11, 1（1968 年 1 月），35-38。 MORRIS, R. 分散存储技术。ACM 通讯，11, 1（1968 年 1 月），38-44。 ","date":"7 April 2024","externalUrl":null,"permalink":"/post/second-post/","section":"Posts","summary":"ACM Digital Library Paper","title":"允许误差的哈希编码中的空间/时间权衡(翻译)","type":"post"},{"content":" MySQL源码编译和调试指南 此指南提供一系列详细的步骤，帮助您从源码编译MySQL服务器，并使用GDB对其进行调试。整个过程包括环境准备、源码获取、编译、调试前的准备、使用GDB调试，以及一些调试技巧和建议。\n调试MySQL源码的完整指南 # 一、环境准备 # 1. 更新系统软件包列表 # sudo apt update 2. 安装编译所需的基本工具和库 # sudo apt install build-essential cmake libncurses5-dev libssl-dev bison libboost-all-dev 3. 安装其他可能需要的库和工具 # sudo apt install libpthread-stubs0-dev libaio-dev libprotobuf-dev protobuf-compiler libnuma-dev libmecab2 mecab mecab-ipadic git 4. 验证GCC版本(需要8.0以上) # gcc --version 如果GCC版本低于8.0,可以使用以下命令安装GCC 8:\nsudo apt install gcc-8 g++-8 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 5. 验证CMake版本(需要3.5以上) # cmake --version 如果CMake版本低于3.5,可以使用以下命令安装CMake 3.5:\nwget https://github.com/Kitware/CMake/releases/download/v3.5.2/cmake-3.5.2.tar.gz tar -xvf cmake-3.5.2.tar.gz cd cmake-3.5.2 ./configure make sudo make install 如果在安装CMake 3.5时遇到问题,可以参考以下步骤:\na. 完成CMake 3.5.2的构建和安装:\ncd cmake-3.5.2 make sudo make install b. 检查CMake 3.5.2是否已经正确安装:\n/usr/local/bin/cmake --version c. 如果步骤b正常,将/usr/local/bin添加到PATH环境变量的最前面:\nexport PATH=/usr/local/bin:$PATH 可以将这一行添加到.bashrc文件的末尾,以使更改永久生效。\nd. 再次尝试cmake --version,应该会输出CMake 3.5.2的版本信息。\n6. 安装pkg-config # sudo apt install pkg-config 7. 如果需要LDAP认证插件,安装LDAP开发库 # sudo apt install libldap2-dev 8. 如果需要FIDO认证插件,安装libudev开发库 # sudo apt install libudev-dev 二、源码获取 # 1. 安装Git # sudo apt install git 2. 从GitHub克隆MySQL 8.0.33的源码 # git clone --depth 1 --branch mysql-8.0.33 https://github.com/mysql/mysql-server.git 3. 进入源码目录 # cd mysql-server 三、编译源码 # 1. 在源码目录下,创建一个单独的编译目录 # mkdir build cd build 2. 下载Boost库 # wget https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.bz2 3. 将下载的boost_1_77_0.tar.bz2文件移动到/home/grok/mysql-server/build/boost目录 # mkdir boost mv boost_1_77_0.tar.bz2 ./boost 4. 使用CMake生成Makefile # cmake .. -DDOWNLOAD_BOOST=1 -DWITH_BOOST=./boost -DCMAKE_BUILD_TYPE=Debug -DWITH_DEBUG=1 如果您的系统已经安装了Boost库,可以去掉-DDOWNLOAD_BOOST和-DWITH_BOOST选项。\n5. 编译源码 # make -j$(nproc) 编译过程可能会花费较长时间,请耐心等待。如果编译出错,请仔细查看错误信息,解决相应的依赖问题或编译选项问题。\n6. 编译完成后,可以在build/bin目录下找到编译出的mysqld可执行文件 # ls ./bin/mysqld 四、调试前的准备 # 1. 初始化数据目录 # ./bin/mysqld --initialize-insecure --datadir=./data 这里使用--initialize-insecure选项进行初始化,不设置root密码。\n2. 启动mysqld服务器,并指定Unix域套接字文件的路径 # ./bin/mysqld --datadir=./data --socket=./data/mysql.sock 这样,MySQL服务器将使用./data/mysql.sock作为Unix域套接字文件。\n3. 打开另一个终端,使用MySQL客户端连接到mysqld服务器,指定相同的套接字文件路径 # ./bin/mysql -uroot -S./data/mysql.sock 4. 在MySQL客户端中,创建一个测试数据库和表 # CREATE DATABASE test; USE test; CREATE TABLE t1 (id INT, name VARCHAR(10)); INSERT INTO t1 VALUES (1, \u0026#39;aaa\u0026#39;), (2, \u0026#39;bbb\u0026#39;), (3, \u0026#39;ccc\u0026#39;); 5. 正确地关闭MySQL服务器 # 您可以在MySQL客户端中执行SHUTDOWN命令:\nmysql\u0026gt; SHUTDOWN; 或者在另一个终端中使用mysqladmin工具:\n./bin/mysqladmin -uroot -S./data/mysql.sock shutdown 如果以上方法无法关闭服务器,您可以在服务器进程所在的终端中按下Ctrl+\\(反斜杠),或者使用kill命令发送SIGTERM或SIGKILL信号。但是这些方法可能会导致数据损坏或不一致,只应在其他方法失败时使用。\n五、使用GDB调试MySQL源码 # 1. 在MySQL源码的build目录下,使用GDB启动mysqld进程(建议使用绝对路径，下面根据实际情况修改) # gdb --args ./bin/mysqld --datadir=/home/grok/mysql-server/build/data/ --socket=/home/grok/mysql-server/build/data/mysql.sock 2. 在GDB中设置断点 # 为避免初始连接问题,建议设置断点于某个查询执行或特定逻辑处理的代码段。例如,如果想要在执行具体的SQL命令时停下来看看发生了什么,可以在处理该SQL命令的函数处设置断点。找到该函数的准确位置需要您根据当前的MySQL源码进行查找。例如:\n(gdb) break sql_parse.cc:执行SQL命令的函数 3. 使用run命令运行mysqld进程 # (gdb) run 4. 打开另一个终端,使用MySQL客户端连接到mysqld服务器,并执行会触发断点的SQL语句 # ./bin/mysql -uroot -S/home/grok/mysql-server/build/data/mysql.sock USE test; SELECT * FROM t1; 5. 切换回GDB所在的终端,此时GDB会停在断点处。您可以使用GDB命令进行调试: # n(next): 单步执行,不进入函数。 s(step): 单步执行,进入函数。 p(print): 打印变量值,如p thd-\u0026gt;query().str。 bt(backtrace): 查看调用栈。 up/down: 在调用栈中向上或向下移动。 f(frame): 切换到指定的栈帧。 c(continue): 继续执行,直到下一个断点。 6. 如果要在调试过程中动态地设置或删除断点,可以使用以下命令: # (gdb) break 文件名:行号 (gdb) break 文件名:函数名 (gdb) info breakpoints (gdb) delete 断点编号 7. 调试完成后,使用quit命令退出GDB # (gdb) quit 六、其他调试技巧和建议 # 在调试之前,先要对MySQL的整体架构和执行流程有一个大致的了解。可以参考MySQL官方文档、书籍、博客等资料。\n从一些核心模块入手,如SQL解析、查询优化、执行器、存储引擎等,逐步深入理解MySQL的内部原理。\n多使用断点和单步执行,仔细观察变量的值和调用栈的变化,理解代码的执行过程。\n善用GDB的条件断点和观察点功能,可以在特定条件下触发断点,或者在变量值发生变化时停下来。\n使用GDB的脚本功能,可以自动化一些调试操作,提高效率。\n在调试过程中,可以适当添加一些日志打印语句,跟踪关键变量和执行路径。\n调试过程中遇到任何问题,可以查阅GDB手册或在网上搜索解决方案。 希望这份指南能够为您的MySQL源码探索之旅提供有力的指导和帮助。\n","date":"1 April 2024","externalUrl":null,"permalink":"/post/first-post/","section":"Posts","summary":"MySQL源码编译和调试指南 此指南提供一系列详细的步骤，帮助您从源码编译MySQL服务器，并使用GDB对其进行调试。整个过程包括环境准备、源码获取、编译、调试前的准备、使用GDB调试，以及一些调试技巧和建议。","title":"MySQL源码编译和调试指南(Ubuntu 22.04.4 LTS) by GrokDB","type":"post"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]